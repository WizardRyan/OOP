@page "/"
@implements IDisposable
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

<div class="main-wrapper" tabindex="0" @onkeydown="OnKeyDown" @ref=keyboardInputRef>
    <div class="left-side">

        <h4>Bg Color</h4>
        <input @ref=colorInput type="color" value="#483D8B" @onchange=ChangeBgColor/>
        <div class="spacer-div"></div>
        <h4>Add Shape</h4>
        <ul class="list-group">
            <li class="list-group-item"><button @onclick="() => AddShape(MeshShape.Box)" type="button" class="shape-button btn btn-secondary">Cube</button></li>
            <li class="list-group-item"><button @onclick="() => AddShape(MeshShape.Cylinder)" type="button" class="shape-button btn btn-secondary">Cylinder</button></li>
            <li class="list-group-item"><button @onclick="() => AddShape(MeshShape.Sphere)" type="button" class="shape-button btn btn-secondary">Sphere</button></li>
            <li class="list-group-item"><button @onclick="() => AddShape(MeshShape.Tetrahedron)" type="button" class="shape-button btn btn-secondary">Tetrahedron</button></li>
            <li class="list-group-item"><button @onclick="() => AddShape(MeshShape.Cone)" type="button" class="shape-button btn btn-secondary">Cone</button></li>
            <li class="list-group-item"><button @onclick="() => AddShape(MeshShape.Capsule)" type="button" class="shape-button btn btn-secondary">Capsule</button></li>
        </ul>
        <div class="spacer-div"></div>
        
        <button type="button" class="bottom-button btn btn-success" @onclick=StartNewDrawing>New Drawing</button>
        <button type="button" class="bottom-button btn btn-primary" @onclick=SaveDrawing>Save Drawing</button>
        <button type="button" class="bottom-button btn btn-primary" @onclick=ExportPicture>Export Picture</button>            
        

    </div>
    <div class="center">
        <h5>Load Drawing:</h5>
        <InputFile style="width: 300px;" class="form-control" OnChange="@HandleFileSelected" />

        <span @ref=viewerSpan>
            <Viewer @ref="drawing.View3D" ViewerSettings=@drawing.ViewerSettings Scene=drawing.Scene  />
        </span>
    </div>
    <div class="right-side">
          <h4>Controls:</h4>
        <ul class="list-group">
          <li class="list-group-item">Left Mouse Bttn: Select Model, Orbit Camera</li>
          <li class="list-group-item">Right Mouse Bttn: Pan Camera</li>
           <li class="list-group-item">Scroll Wheel: Zoom Camera</li>
          <li class="list-group-item">W, S: Resize on Vertical Axis</li>
          <li class="list-group-item">A, D: Resize on Horizontal Axis</li>
          <li class="list-group-item">Q, E: Resize on Forward Axis</li>
          <li class="list-group-item">I, K: Translate on Vertical Axis</li>
          <li class="list-group-item">J, L: Translate on Horizontal Axis</li>
          <li class="list-group-item">U, O: Translate on Forward Axis</li>
          <li class="list-group-item">Z: Undo</li>
           <li class="list-group-item">Del: Delete Object</li>
           <li class="list-group-item">Space: Duplicate Object</li>
           <li class="list-group-item" style="font-weight: bold;">Remember: Clicking off of an object will deselect it!</li>
        </ul>
    </div>
</div>

@code {
    private Drawing? drawing;
    private ElementReference keyboardInputRef;
    ElementReference colorInput;
    ElementReference viewerSpan;

    protected override Task OnInitializedAsync()
    {
        drawing = Drawing.GetInstance();

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            drawing.View3D.ObjectSelected += drawing.OnObjectSelected;
            await keyboardInputRef.FocusAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void OnKeyDown(KeyboardEventArgs e)
    {
        Command? command = InputManager.ProcessInput(e.Key, drawing.GetCurrentlySelectedMesh(), drawing);
        if(command != null)
        {
            drawing.ExecuteCommand(command);
        }
    }

    public void AddShape(MeshShape shape)
    {
        drawing.ExecuteCommand(new AddShapeCommand(drawing, shape));
    }

    public void ChangeBgColor(ChangeEventArgs e)
    {
        drawing.Scene.BackGroundColor = e.Value.ToString();
        drawing.View3D.UpdateScene();
    }

    public async Task StartNewDrawing()
    {
        drawing.SetDefaultState();
        await JSRuntime.InvokeVoidAsync("setDefaultColorPicker", colorInput);
    }

    public async Task SaveDrawing()
    {
        await JSRuntime.InvokeVoidAsync("downloadJSONFile", DrawingSaverLoader.GetJSONForDrawing(drawing));
    }

    public async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);
        string json = System.Text.Encoding.UTF8.GetString(buffer, 0, buffer.Length);
        DrawingSaverLoader.LoadDrawingFromJSON(drawing, json);
    }

    public async Task ExportPicture()
    {
        //attempt to disable double buffering, then fill single buffer with image. Doesn't work.
        await JSRuntime.InvokeVoidAsync("hide", viewerSpan);
        await drawing.View3D.UpdateScene();
        await JSRuntime.InvokeVoidAsync("exportPicture", viewerSpan);
        await JSRuntime.InvokeVoidAsync("show", viewerSpan);
    }

    public void Dispose()
    {
        drawing.View3D.ObjectSelected -= drawing.OnObjectSelected;
    }

}

<style>
    .main-wrapper{
        display: flex;
        justify-content: space-around;
        align-items: center;
        height: 100%;
    }

    .left-side{
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .right-side{
        margin-left: 10px;
    }

    .center{
        width: 70%;
    }

    .shape-button{
        width: 100%;
    }
    
    .spacer-div{
        margin: 10px 0 10px 0;
    }

    .bottom-button{
        margin-bottom: 10px;
    }

</style>